#!/usr/bin/env ruby
require 'bundler/setup'
require 'json'
require 'ezmq'
require 'contracts'
require 'robot_sweatshop/config'
require 'robot_sweatshop/payload'

$stdout.sync = true
include Contracts

Contract String => Bool
def json?(string)
  begin
    JSON.load string
    true
  rescue JSON::ParserError => e
    false
  end
end

Contract String => Bool
def from_github?(user_agent)
  user_agent.start_with? 'Github-Hookshot'
end

Contract String => Bool
def from_bitbucket?(user_agent)
  user_agent.start_with? 'Bitbucket.org'
end

Contract Hash => String
def detect_format_of(request)
  return 'empty' if request['payload'].empty?
  return 'Github' if from_github? request['user_agent']
  return 'Bitbucket' if from_bitbucket? request['user_agent']
  return 'JSON' if json? request['payload']
  'unsupported'
end

Contract String, String => Or[Hash, nil]
def payload_hash_from(payload, format)
  # TODO: use require instead of require_relative
  lib_file = "#{__dir__}/../lib/robot_sweatshop/payload/#{format.downcase}.rb"
  return nil unless File.file?(lib_file)
  require_relative lib_file
  Object.const_get("#{format}Payload").new(payload).to_hash
end

Contract Hash => Hash
def parse(request)
  format = detect_format_of request
  return {payload: {}, error: ''} if format == 'empty'
  payload = payload_hash_from request['payload'], format
  return {payload: {}, error: "Can't parse #{format} payload"} if payload.nil?
  {payload: payload, error: ''}
end

Contract Any => Hash
def validate(request)
  return {payload: {}, error: "Invalid JSON request"} unless json? request
  JSON.load request
end

puts 'Started'
server = EZMQ::Server.new port: configatron.payload_parser_port#, encode: -> m { JSON.dump m }
server.listen do |request|
  puts "Parsing: #{request}"
  request = validate request
  request = parse request unless request[:error]
  JSON.dump request
end
